scalar DateTime

type User {
    id: ID
    email: String
    username: String
}

# TODO ID is not unique (create composite with name + group)
type Author {
    # id: ID
    name: String!
    avatar: String!
}

type Reply {
    "Dyo ID which this reply replies"
    dyoId: String!
    groupId: String!

    id: ID!
    body: String!
    author: Author!
    createdAt: DateTime!
    """
    True - Private
    False - Public
    """
    private: Boolean
}

# TODO fetch parent list
type Dyo {
    """
    [] - Private
    [*] - Public
    [&] - Friends
    ['id1', 'id2'] - Selected users
    """
    privacy: [String!]!

    id: ID!
    groupId: String!
    headline: String

    "The content for the post."
    body: String!

    tags: [String!]
    createdAt: DateTime!
    author: Author!

    parentId: String
    # repliesList: [Reply!]!
    # dyosList: [Dyo!]!
    # parentList: [String!]!
}



#**********************#
#         Query        #
#**********************#

type Query {
    dyo: Dyo
    # dyosList: [Dyo!]!
    repy: Reply
    # replyesList: [Reply!]!
}



#**********************#
#       Mutation       #
#**********************#

type Mutation {
    "Create brand new Dyo"
    createDyo(
        headline: String
        "The content for the post."
        body: String!
        "Define at least 3 tags."
        tags: [String!]
        privacy: [String]
        "Dyo this one is starting a dialog with."
        parentId: String
        "Group that contains the parent Dyo."
        groupId: String
    ): CreateDyoPayload

    "Create reply to one Dyo"
    createReply(
        body: String!
        private: Boolean
        "Dyo ID which this reply replies"
        dyoId: String!
        "Dyo group ID this reply replies"
        groupId: String!
    ): CreateReplyPayload
}

type CreateDyoPayload {
    dyo: Dyo
    userId: String
}

type CreateReplyPayload {
    reply: Reply
    userId: String
}
